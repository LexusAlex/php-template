Строим проект на php

Структура проекта :
1. Инфраструктура, стек и окружение docker
    Установка https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository
    Опции после установки https://docs.docker.com/engine/install/linux-postinstall
    .env
    COMPOSE_PROJECT_NAME=site
    К контейнерам можно обращаться по имени
2. Запуск команды в техническом контейнере
    make php-cli name=composer
    make php-cli name='php -v'
    make php-cli name='composer require slim/slim slim/psr7'
    docker-compose run --rm php-cli
3. Доступ к бд
    хост: 127.0.0.1
    логин: root
    пароль: template
    бд: template

   Смотреть Елисеева
4. Продакшен окружение/ Потом завершить
5. Сделать независимое от докера развертывание
docker exec -it php-template_apache_1_7bdb0c1aab86 /bin/ash

https://habr.com/ru/company/southbridge/blog/528206/

yii2 создание приложения с нуля
https://www.yiiframework.com/doc/guide/2.0/ru/tutorial-yii-as-micro-framework

yii2
Запускаем на любом веб сервере, здесь не важно что использовать, я буду использовать докер
создаем composer.json
docker-compose run --rm php-cli composer init
docker-compose run --rm php-cli-alpine composer require yiisoft/yii2

composer.json
{
    "require": {
        "yiisoft/yii2": "2.0.39.2"
    },
    "repositories": [
        {
            "type": "composer",
            "url": "https://asset-packagist.org"
        }
    ]
}

index.php
<?php

// закомментируйте следующие две строки при использовании в рабочем режиме
defined('YII_DEBUG') or define('YII_DEBUG', true);
defined('YII_ENV') or define('YII_ENV', 'dev');

require(__DIR__ . '/../vendor/autoload.php');
require(__DIR__ . '/../vendor/yiisoft/yii2/Yii.php');

$config = require __DIR__ . '/../yii2/config/web.php';
(new yii\web\Application($config))->run();

laravel

docker-compose run --rm php-cli composer require laravel/laravel
docker-compose run --rm php-cli composer dump-autoload
docker-compose run --rm php-cli php ./laravel/artisan
docker-compose run --rm php-cli composer create-project --prefer-dist laravel/laravel blog

dd() встроенное форматирование кода в laravel

{
    "require": {
        "laravel/laravel": "^8.4"
    },
    "autoload": {
      "psr-4": {
        "App\\": "laravel/app/"
      }
    }
}


index.php

<?php

use Illuminate\Contracts\Http\Kernel;
use Illuminate\Http\Request;

define('LARAVEL_START', microtime(true));

require __DIR__.'/../vendor/autoload.php';

$app = require_once __DIR__.'/../laravel/bootstrap/app.php';

$kernel = $app->make(Kernel::class);

// Обрабатываем запросы

$response = tap($kernel->handle(
    $request = Request::capture()
))->send();

$kernel->terminate($request, $response);

GIT
https://github.com/nicothin/web-development/tree/master/git

PhpUnit
docker-compose run --rm php-cli-alpine composer require --dev phpunit/phpunit
docker-compose run --rm php-cli-alpine composer dump-autoload
docker-compose run --rm php-cli-alpine /vendor/bin/phpunit --generate-configuration

docker-compose run --rm php-cli-alpine ./vendor/bin/phpunit tests/MethodsTest.php
Добавление phpunit.xml

Ansible установка на локальный компьютер

$ sudo apt update
$ sudo apt install software-properties-common
$ sudo apt-add-repository --yes --update ppa:ansible/ansible
$ sudo apt install ansible

ansible-playbook -i infrastructure/provisioning/hosts.yml infrastructure/provisioning/site.yml

ansible all -m ping - все хосты
ansible debian -m ping - один хост
ansible test -m ping - группа хостов

ansible debian -m setup - информация о клиентах
ansible debian -m shell -a "uptime" - запуск команды на хосте
ansible debian -m file -a "/home/alex/test.txt state=touch"

Исследование работы react

1. Идемпотентная функция - при одних и тех же входных данных возвращает один и тот же результ
2. Если название ключа в объекте js совпадает со значением то значение можно не писать


нужно было сказать, что есть 2 метода добавления: append и appendChild. В первом можно добавить как Node узел, так и текст. В случае с appendChild можно добавить только Node. Так как мы с помощью append добавляем только Node, лучше использовать appendChild. Есть подозрения, что в этом случае интерпритатор не проверяет тип, что экономит время
getElementByID устарел (хоть и работает). Для таких целей лучше использовать document.querySelector(), так будет понятнее для людей, кто пришел в профессию из верстки
JavaScript инициализирует все функции перед выполнением кода только тогда, когда используется декларативное описание. При использовании Function Expression такой подход вызовет ошибку, ибо функция создается только в момент объявления

2 урок - 37 минута


db - docker pull postgres:13-alpine
DB - миграции

phinx Миграции БД
https://github.com/cakephp/phinx
https://book.cakephp.org/phinx/0/en/index.html
docker-compose run --rm php-cli-alpine composer require robmorgan/phinx
docker-compose run --rm php-cli-alpine composer phinx
docker-compose run --rm php-cli-alpine composer phinx init

Создание миграции
make create-migration name=AddedTableMenu

Добавление данных
make added-data name=Data

user: 1000:1000 права на файлы

docker-compose run --rm php-cli-alpine composer require --dev fzaninotto/faker

/*

$page = (isset($_GET['page'])) ? $_GET['page'] : 1;
$limit = 5;
$offset = $limit * ($page - 1);

$connection = new \PDO('mysql:host=mariadb-ubuntu;dbname=template_dev;charset=utf8', 'root', 'template',[\PDO::ATTR_ERRMODE => \PDO::ERRMODE_EXCEPTION]);

$result = $connection->query('SELECT * FROM notes_1 LIMIT '.$limit.' OFFSET '. $offset,PDO::FETCH_ASSOC)->fetchAll();

echo '<pre>';
print_r($result);
*/

$connection = new \PDO('mysql:host=mariadb-ubuntu;dbname=template_dev;charset=utf8', 'root', 'template',[\PDO::ATTR_ERRMODE => \PDO::ERRMODE_EXCEPTION]);

// Всего записей
$count_records = (int)$connection->query('SELECT COUNT(*) FROM notes_1',PDO::FETCH_ASSOC)->fetchColumn();
// Текущая страница
$page = (isset($_GET['page'])) ? (int)$_GET['page'] : 1;
// Показывать записей на странице
$view_records = 5;
// C какой записи начать выборку
$start_record = ($page - 1) * $view_records;
// Получаем массив $result с результатом
$result = $connection->query("SELECT * FROM notes_1 LIMIT $start_record, $view_records",PDO::FETCH_ASSOC)->fetchAll();
// Всего страниц
$count_pages = ceil($count_records/$view_records);
// Количество ссылок навигации
$count_show_links = 10;
// URL
$url = "/";
// Ссылки в html
$result_links = '';

// Результат
echo '<pre>';
print_r($result);
echo '</pre>';

// Расчитываем первую, последнюю, следующую и предыдущую страницу
$result_links .= "<div style='font-size: 20px'>";
if ($page != 1) {
    $result_links .= '<a href="'.$url.'" title="Первая страница">&lt;&lt; Первая</a>';
}

if ($page > 1) {
    $result_links .= '<a href="'.$url.'?page='.($page - 1).'" title="Предыдущая страница">&lt; Предыдущая </a>';
}

// $pagesList - массив с чанками
// $needPage - Здесь это наш GET - параметр (START)
// Вернёт int - индекс нужного чанка:
function searchPage( array $pagesList, /*int*/ $needPage )
{
    foreach( $pagesList AS $chunk => $pages  ){
        if( in_array($needPage, $pages) ){
            return $chunk;
        }
    }
    return 0;
}

// Выводим ссылки на сами страницы
for( $i = 0; $i < $count_pages; $i++) {
    $pages[$i + 1] = $i * $view_records;
}

$allPages = array_chunk($pages, $count_show_links, true);

$needChunk = searchPage( $allPages, $page);

foreach($allPages[$needChunk] AS $pageNum => $offset )  {
    // Делаем текущую страницу не активной (т.е. не ссылкой):
    if( $offset == $page ) {
        $result_links .= '<li><span>'. $pageNum .'</span></li>';
        continue;
    }
    $result_links .= '<li><a href="'.$url.'?'.'page'.'='. $pageNum .'">'. $pageNum . '</a></li>';
}

//echo "<pre>";
//print_r($allPages);
/*
for ($i = 1; $i <= ceil($count_records / $view_records); $i++) {
    $result_links .= '<a href="'.$url.'?page='.$i.'">'.$i.'</a>';
}
*/


if ($page != $count_pages) {
    $result_links .= '<a href="'.$url.'?page='.($page + 1).'" title="Следующая страница">Следующая &gt;</a>';
    $result_links .= '<a href="'.$url.'?page='.$count_pages.'" title="Последняя страница">Последняя &gt;&gt; </a>';
}

$result_links .= "</div>";
/*
// Расчитываем ссылки
if ($count_pages > 1) {
    if ( ($page - 1) < floor($count_show_links / 2)) {
        $start_link = 1;
    } else {
        $start_link = ($page - 1) - floor($count_show_links / 2);
    }

    $end_link = $start_link + $count_show_links - 1;

    if ($end_link > $count_pages) {
        $start_link -= ($end_link - $count_pages);
        $end_link = $count_pages;
        if ($start_link < 1) {
            $start_link = 1;
        }
    }
}
// Собираем результат
echo '<pre>';
print_r($result);
echo '</pre>';
$result_links = '';
if ($page != 1) {
    $result_links .= '<a href="'.$url.'" title="Первая страница">&lt;&lt;&nbsp;&nbsp;</a>';
    if ($page == 2) {
        $result_links .= '<a href="'.$url.'" title="Предыдущая страница">&lt;</a>';
    } else {
        $result_links .= '<a href="'.$url.'?page='.($page - 1).'" title="Предыдущая страница">&lt;&nbsp;&nbsp;</a>';
    }
    for ($i = $start_link; $i <= $end_link; $i++) {
        if ($i == $page) {
            $result_links .= "<span><?=$i?></span>";
        } else {
            if ($i == 1) {
                $result_links .= '<a href="'.$url.'">'.$i.'</a>';
            } else {
                $result_links .= '<a href="'.$url.'?page='.$i.'">'.$i.'</a>';
            }
        }
    }
    if ($page != $count_pages) {
        $result_links .= '<a href="'.$url.'?page='.($page + 1).'" title="Следующая страница">&nbsp;&nbsp;&gt;</a>';
        $result_links .= '<a href="'.$url.'?page='.$count_pages.'" title="Последняя страница">&nbsp;&nbsp;&gt;&gt;</a>';
    }
}
*/
echo $result_links;